package gomokucontest;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.lang.reflect.Method;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.LinkedList;
import javax.swing.ImageIcon;

public class GomokuContest extends javax.swing.JFrame {

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GomokuContest.getInstance().setVisible(true);
            }
        });
    }

    private LinkedList<EngineConf> engines = new LinkedList<EngineConf>();
    private static GomokuContest instance;
    private int blackWinsCount = 0;
    private int whiteWinsCount = 0;
    private WorkThread workthread;
    public GobanPanel gobanPanel = null;

    private GomokuContest() {
        initComponents();
        setSize(650, 450);
        setIconImage(new ImageIcon(this.getClass().getResource("icon.png")).getImage());
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension frameSize = this.getSize();
        setLocation((screenSize.width - frameSize.width) / 2, (screenSize.height - frameSize.height) / 2);
        gobanPanel = new GobanPanel(15);
        add(gobanPanel, BorderLayout.CENTER);
        loadModules(new File("."));
        for (int i = 0; i < engines.size(); i++) {
            jComboBoxPlayerBlack.addItem(engines.get(i));
            jComboBoxPlayerWHITE.addItem(engines.get(i));
        }
        gobanPanel.playerBLACKhuman = true;
        gobanPanel.playerWHITEhuman = true;
        gobanPanel.clearGoban();
    }

    public static GomokuContest getInstance() {
        if (instance == null) {
            instance = new GomokuContest();
        }
        return instance;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the GomokuContest Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelMenu = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBoxPlayerBlack = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jComboBoxPlayerWHITE = new javax.swing.JComboBox();
        jButtonStartGames = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabelScore = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jProgressBar = new javax.swing.JProgressBar();
        jSpinnerGamesCount = new javax.swing.JSpinner();
        jCheckBoxShowHistory = new javax.swing.JCheckBox();
        jCheckBoxWhiteBoard = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gomoku contest");

        jPanelMenu.setBackground(new java.awt.Color(255, 255, 255));
        jPanelMenu.setPreferredSize(new java.awt.Dimension(220, 500));

        jLabel1.setText("BLACK:");

        jComboBoxPlayerBlack.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Human" }));

        jLabel2.setText("WHITE:");

        jComboBoxPlayerWHITE.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Human" }));

        jButtonStartGames.setText("Start games");
        jButtonStartGames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartGamesActionPerformed(evt);
            }
        });

        jLabel3.setText("Match count:");

        jLabelScore.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelScore.setText("0:0");

        jLabel4.setText("Score:");

        jProgressBar.setStringPainted(true);

        jSpinnerGamesCount.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(100), Integer.valueOf(1), null, Integer.valueOf(1)));

        jCheckBoxShowHistory.setText("show history");
        jCheckBoxShowHistory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBoxShowHistoryMouseClicked(evt);
            }
        });

        jCheckBoxWhiteBoard.setText("white board");
        jCheckBoxWhiteBoard.setToolTipText("");
        jCheckBoxWhiteBoard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBoxWhiteBoardMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanelMenuLayout = new javax.swing.GroupLayout(jPanelMenu);
        jPanelMenu.setLayout(jPanelMenuLayout);
        jPanelMenuLayout.setHorizontalGroup(
            jPanelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jCheckBoxWhiteBoard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxShowHistory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelMenuLayout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelScore, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jButtonStartGames, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jProgressBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelMenuLayout.createSequentialGroup()
                        .addGroup(jPanelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxPlayerBlack, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxPlayerWHITE, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(1, 1, 1))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelMenuLayout.createSequentialGroup()
                        .addGroup(jPanelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(jPanelMenuLayout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSpinnerGamesCount, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(19, 19, 19))
        );
        jPanelMenuLayout.setVerticalGroup(
            jPanelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxPlayerBlack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxPlayerWHITE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(jButtonStartGames)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jSpinnerGamesCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabelScore))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(jCheckBoxShowHistory)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxWhiteBoard)
                .addContainerGap(179, Short.MAX_VALUE))
        );

        getContentPane().add(jPanelMenu, java.awt.BorderLayout.LINE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonStartGamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartGamesActionPerformed
        gobanPanel.clearGoban();
        if (jComboBoxPlayerBlack.getSelectedIndex() > 0) {
            gobanPanel.playerBLACK = (((EngineConf) jComboBoxPlayerBlack.getSelectedItem()).createEngine());
            gobanPanel.playerBLACK.gameStart();
            gobanPanel.playerBLACKhuman = false;
            gobanPanel.placeStone((int)(3+(gobanPanel.getGobanSize()-6)*Math.random()), (int)(3+(gobanPanel.getGobanSize()-6)*Math.random()));
        } else {
            gobanPanel.playerBLACKhuman = true;
        }

        if (jComboBoxPlayerWHITE.getSelectedIndex() > 0) {
            gobanPanel.playerWHITE = (((EngineConf) jComboBoxPlayerWHITE.getSelectedItem()).createEngine());
            gobanPanel.playerWHITE.gameStart();
            gobanPanel.playerWHITEhuman = false;
        } else {
            gobanPanel.playerWHITEhuman = true;
        }

        gobanPanel.repaint();
        
        if (!gobanPanel.playerBLACKhuman && !gobanPanel.playerWHITEhuman) {
            jProgressBar.setMaximum((Integer) jSpinnerGamesCount.getValue());
            workthread = new WorkThread(gobanPanel, (Integer) jSpinnerGamesCount.getValue());
            workthread.start();
        }
    }//GEN-LAST:event_jButtonStartGamesActionPerformed

    private void jCheckBoxShowHistoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBoxShowHistoryMouseClicked
        gobanPanel.repaint();
    }//GEN-LAST:event_jCheckBoxShowHistoryMouseClicked

    private void jCheckBoxWhiteBoardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBoxWhiteBoardMouseClicked
        gobanPanel.repaint();
    }//GEN-LAST:event_jCheckBoxWhiteBoardMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonStartGames;
    private javax.swing.JCheckBox jCheckBoxShowHistory;
    private javax.swing.JCheckBox jCheckBoxWhiteBoard;
    private javax.swing.JComboBox jComboBoxPlayerBlack;
    private javax.swing.JComboBox jComboBoxPlayerWHITE;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelScore;
    private javax.swing.JPanel jPanelMenu;
    public javax.swing.JProgressBar jProgressBar;
    private javax.swing.JSpinner jSpinnerGamesCount;
    // End of variables declaration//GEN-END:variables

    private void loadModules(File MODULES_DIR) {
        if (MODULES_DIR.isDirectory()) {
            for (File file : MODULES_DIR.listFiles()) {
                if (file.isDirectory()) {
                    loadModules(file);
                }
                boolean isAlg = false;
                if (file.getName().endsWith(".jar")) {
                    String xml = file.getAbsolutePath().substring(0, file.getAbsolutePath().length() - file.getName().length())
                            + file.getName().substring(0, file.getName().length() - 4) + ".xml";
                    File xmlf = new File(xml);
                    isAlg = xmlf.exists();
                } else if (file.getName().endsWith(".class")) {
                    String xml = file.getAbsolutePath().substring(0, file.getAbsolutePath().length() - file.getName().length())
                            + file.getName().substring(0, file.getName().length() - 6) + ".xml";
                    File xmlf = new File(xml);
                    isAlg = xmlf.exists();
                }
                if (isAlg) {
                    try {
                        addClassPathURL("file:" + file.getAbsolutePath());
                    } catch (Throwable ex) {
                        System.out.println("Ошибка при загрузке списка модулей: " + ex.getMessage());
                    }
                }
            }
        }
    }

    private void addClassPathURL(String path) throws Throwable {
        URL u = new URL(path);
        URLClassLoader urlClassLoader = (URLClassLoader) ClassLoader.getSystemClassLoader();
        Class urlClass = URLClassLoader.class;
        Method method = urlClass.getDeclaredMethod("addURL", new Class[]{URL.class});
        method.setAccessible(true);
        method.invoke(urlClassLoader, new Object[]{u});
        String filename = path.substring(5, path.length() - 3) + "xml";
        File file = new File(filename);
        if (file.isFile()) {
            engines.add(new EngineConf(file));
        }
    }

    public int isGameEnd() {
        int gameEnd = 0;
        boolean gobamIsFill = true;
        for (int i = 0; i < gobanPanel.getGobanSize(); i++) {
            for (int j = 0; j < gobanPanel.getGobanSize(); j++) {
                if (gobanPanel.getGobanIJ(i, j) == 0) {
                    gobamIsFill = false;
                    break;
                }
            }
            if (gobamIsFill == false) {
                break;
            }
        }
        if (gobamIsFill) {
            gameEnd = 3;
        }
        if (check5inLine(GobanPanel.WHITE)) {
            whiteWinsCount++;
            jLabelScore.setText(blackWinsCount + ":" + GomokuContest.getInstance().whiteWinsCount);
            gameEnd = GobanPanel.WHITE;
        }
        if (check5inLine(GobanPanel.BLACK)) {
            blackWinsCount++;
            jLabelScore.setText(blackWinsCount + ":" + GomokuContest.getInstance().whiteWinsCount);
            gameEnd = GobanPanel.BLACK;
        }
        gobanPanel.setGameEnd(gameEnd);
        return gameEnd;
    }

    private boolean check5inLine(int c) {
        int len;
        //проверка по i (по столбцам)
        for (int i = 0; i < gobanPanel.getGobanSize(); i++) {
            len = 0;
            for (int j = 0; j < gobanPanel.getGobanSize(); j++) {
                if (gobanPanel.getGobanIJ(i, j) == c) {
                    len++;
                } else {
                    if (len == 5) {
                        return true;
                    }
                    len = 0;
                }
            }
            if (len == 5) {
                return true;
            }
        }

        //проверка по j	(по строкам)
        for (int j = 0; j < gobanPanel.getGobanSize(); j++) {
            len = 0;
            for (int i = 0; i < gobanPanel.getGobanSize(); i++) {
                if (gobanPanel.getGobanIJ(i, j) == c) {
                    len++;
                } else {
                    if (len == 5) {
                        return true;
                    }
                    len = 0;
                }
            }
            if (len == 5) {
                return true;
            }
        }
        //проверка по диагонали j++  i++
        for (int k = 0; k < gobanPanel.getGobanSize() - 3; k++) {
            len = 0;
            for (int j = k, i = 0; i < gobanPanel.getGobanSize() && j < gobanPanel.getGobanSize(); j++, i++) {
                if (gobanPanel.getGobanIJ(i, j) == c) {
                    len++;
                } else {
                    if (len == 5) {
                        return true;
                    }
                    len = 0;
                }
            }
            if (len == 5) {
                return true;
            }
        }
        for (int k = 0; k < gobanPanel.getGobanSize() - 3; k++) {
            len = 0;
            for (int j = 0, i = k; i < gobanPanel.getGobanSize(); j++, i++) {
                if (gobanPanel.getGobanIJ(i, j) == c) {
                    len++;
                } else {
                    if (len == 5) {
                        return true;
                    }
                    len = 0;
                }
            }
            if (len == 5) {
                return true;
            }
        }
        //проверка по диагонали i++  j--
        for (int k = 4; k < gobanPanel.getGobanSize(); k++) {
            len = 0;
            for (int i = k, j = 0; i >= 0; i--, j++) {
                if (gobanPanel.getGobanIJ(i, j) == c) {
                    len++;
                } else {
                    if (len == 5) {
                        return true;
                    }
                    len = 0;
                }
            }
            if (len == 5) {
                return true;
            }
        }

        for (int k = 1; k < gobanPanel.getGobanSize() - 3; k++) {
            len = 0;
            for (int i = k, j = gobanPanel.getGobanSize() - 1; i < gobanPanel.getGobanSize(); j--, i++) {
                if (gobanPanel.getGobanIJ(i, j) == c) {
                    len++;
                } else {
                    if (len == 5) {
                        return true;
                    }
                    len = 0;
                }
            }
            if (len == 5) {
                return true;
            }
        }

        return false;
    }
    
    public boolean showHistory(){
        return jCheckBoxShowHistory.isSelected();
    }
    
    public boolean whiteBoard(){
        return jCheckBoxWhiteBoard.isSelected();
    }
}
